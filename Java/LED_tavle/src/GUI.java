/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author RobinBergseth
 */

import gnu.io.CommPortIdentifier;
import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import javax.imageio.ImageIO;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.JColorChooser;
import javax.swing.JFrame;

public class GUI extends javax.swing.JFrame{
    private final ArrayConverter converter;
    private final PictureWriter writer;
    private final String[] serialPortList; 
    private final int indexSelectedPort;
    private byte[] writeArray;

    /**
     * Constructor
     * Creates new form GUI
     */
    public GUI() {
        converter = new ArrayConverter();
        (new Thread(writer = new PictureWriter())).start();
        JComboBox com = new JComboBox();
        serialPortList = this.getComList();
        if(serialPortList == null){
            com.addItem("No serial port found");
        }
        else{
            for(String s : serialPortList){
                com.addItem(s);
            }
        }
        JOptionPane.showMessageDialog(this, com, "Select the serial port", JOptionPane.INFORMATION_MESSAGE);
        indexSelectedPort = com.getSelectedIndex();
        writer.initialize(serialPortList[indexSelectedPort]);
        byte[] initList = new byte[9600];
        for(int x = 0; x < initList.length; x++){
            initList[x] = 0;
        }
        writer.setWriteArray(initList, false);
        initComponents();
    }
    
    /**
     * Reads an image and sends it be shown at the screen
     * @param path The path to the picture
     */
    public void showPicture(String path){
        int[][] picture = null;
        BufferedImage img = null;
        try{
            img = ImageIO.read(new File(path));
        }
        catch(IOException e){
            JOptionPane.showMessageDialog(this, "Can't read image", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(img != null){
            if((img.getHeight() > 40) || img.getWidth() > 80){
                JOptionPane.showMessageDialog(this, "Image is to big\nMax size: 80 x 40\nPlease resize your image", "Image to big", JOptionPane.INFORMATION_MESSAGE);
            }
            else{
                picture = new int[img.getWidth()][img.getHeight()];
                for(int y = 0; y < picture[0].length; y++){
                    for(int x = 0; x < picture.length; x++){
                        picture[x][y] = img.getRGB(x, y);
                    }
                }
                writeArray = converter.getWriteArray(picture);
                writer.setWriteArray(writeArray, false);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        pictureButton = new javax.swing.JButton();
        colorButton = new javax.swing.JButton();
        sekvensButton = new javax.swing.JButton();
        powerButton = new javax.swing.JButton();
        pongButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        jLabel1.setText("LED skjerm kontroller");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pictureButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        pictureButton.setText("Vis bilde");
        pictureButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pictureButtonMouseClicked(evt);
            }
        });

        colorButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        colorButton.setText("Choose color");
        colorButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                colorButtonMouseClicked(evt);
            }
        });

        sekvensButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        sekvensButton.setText("Stickman sekvens");
        sekvensButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sekvensButtonMouseClicked(evt);
            }
        });

        powerButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        powerButton.setText("Sl√• av");
        powerButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                powerButtonMouseClicked(evt);
            }
        });

        pongButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        pongButton.setText("Pong");
        pongButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pongButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pictureButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(colorButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(sekvensButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(powerButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pongButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(pictureButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(colorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sekvensButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(powerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pongButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pictureButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pictureButtonMouseClicked
        // Creates a file explorer which lets the user chose a picture to be shown at the screen 
        final JFileChooser fc = new JFileChooser();
        FileFilter filter = new FileNameExtensionFilter("Image files", ImageIO.getReaderFileSuffixes());
        fc.setFileFilter(filter);
        fc.setAcceptAllFileFilterUsed(false);
        int returnValue = fc.showDialog(fc, null);
        if(returnValue == 0){
            this.showPicture(fc.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_pictureButtonMouseClicked

    private void sekvensButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sekvensButtonMouseClicked
        // Starts a picture sequence 
        String[] paths = new String[14];
        for(int x = 0; x < 14; x++){
            int imgNr = x + 1;
            java.net.URL image = GUI.class.getResource("images/Stickman" + imgNr + ".jpg");
            paths[x] = image.getPath();
        }
        if(paths != null){
            this.showSequence(paths);
        }
        else{
            System.out.println("Paths not found");
        }
    }//GEN-LAST:event_sekvensButtonMouseClicked

    private void powerButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_powerButtonMouseClicked
        // Set all the pixels on the screen to black
        int color = 0x000000;
        byte[] testColor = new byte[9600];
        int byteNr = 0;
        for(int x = 0; x < 3200; x++){
            for(int RGB = 16; RGB >=0; RGB -= 8, byteNr++){
                testColor[byteNr] = (byte) (color >> RGB);
            }
        }
        writer.setWriteArray(testColor, false);
    }//GEN-LAST:event_powerButtonMouseClicked

    private void colorButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_colorButtonMouseClicked
       // Opens a color chooser dialog and passes the color to the screen
        try{
           Color c = JColorChooser.showDialog(this, "Choose color", Color.red);
           int color = c.getRGB();
           byte[] testColor = new byte[9600];
           int byteNr = 0;
           for(int x = 0; x < 3200; x++){
                for(int RGB = 16; RGB >=0; RGB -= 8, byteNr++){
                    testColor[byteNr] = (byte) (color >> RGB);
                }
            }
        writer.setWriteArray(testColor, false);
       }
       catch(NullPointerException e){
           
       }
    }//GEN-LAST:event_colorButtonMouseClicked

    private void pongButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pongButtonMouseClicked
        // Creates a new Pong object from the Pong class
        new Pong(writer);
    }//GEN-LAST:event_pongButtonMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton colorButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton pictureButton;
    private javax.swing.JButton pongButton;
    private javax.swing.JButton powerButton;
    private javax.swing.JButton sekvensButton;
    // End of variables declaration//GEN-END:variables
    
    
    /**
     * Get the "keys" from the HashMap containing the serial ports
     * @return String array of serial port "keys" 
     */
    private String[] getComList(){
        HashMap list = writer.getComList();
        String[] returnList = new String[list.size()];
        if(!list.isEmpty()){
            Iterator<HashMap.Entry<String, CommPortIdentifier>> iterator = list.entrySet().iterator();
            int x = 0;
            while(iterator.hasNext()){
                HashMap.Entry<String, CommPortIdentifier> comPort = iterator.next();
                returnList[x] = comPort.getKey();
                x++;
            }
            return returnList;
        }
        else{
            return null;
        }
    }
    /**
     * Take a set of images and create a sequens of them
     * @param paths String array containing the paths to the images
     */
    private void showSequence(String[] paths){
        JComboBox numbers = new JComboBox();
        for(int x = 1; x < 21; x++){
            numbers.addItem(x);
        }
        ArrayList sequence = new ArrayList<byte[]>();
        for(int imgNr = 0; imgNr < paths.length; imgNr++){
            int[][] picture = null;
            BufferedImage img = null;
            try{
                img = ImageIO.read(new File(paths[imgNr]));
            }
            catch(IOException e){
                JOptionPane.showMessageDialog(this, "Can't read image", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if(img != null){
                if((img.getHeight() > 40) || img.getWidth() > 80){
                    JOptionPane.showMessageDialog(this, "Image is to big\nMax size: 80 x 40\nPlease resize your image", "Image to big", JOptionPane.INFORMATION_MESSAGE);
                }
                else{
                    picture = new int[img.getWidth()][img.getHeight()];
                    for(int y = 0; y < picture[0].length; y++){
                        for(int x = 0; x < picture.length; x++){
                            picture[x][y] = img.getRGB(x, y);
                        }
                    }
                    byte[] seqImg = converter.getWriteArray(picture);
                    sequence.add(seqImg);
                }
            }
        }
        writer.sequence(sequence);
    }
}
